Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].



class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
    int n=intervals.size();
    sort(intervals.begin(),intervals.end());
    stack<pair<int,int>> st;
    st.push({intervals[0][0],intervals[0][1]});
    for(int i=1;i<n;i++){
        int s=intervals[i][0];
        int e=intervals[i][1];
        if(st.top().second<s){
            st.push({s,e});
        }
        else{
            int new_s=st.top().first;
            int new_e=st.top().second;
            st.pop();
            new_e=max(new_e,e);
            st.push({new_s,new_e});
        }
    }
    vector<vector<int>> ans;
    while(!st.empty()){
        ans.push_back({st.top().first,st.top().second});
        st.pop();
    }
    reverse(ans.begin(),ans.end());
    return ans;
    }
};
