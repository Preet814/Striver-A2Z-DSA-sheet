Given an unsorted array arr of positive integers. One number a from the set [1, 2,....,n] is missing and one number b occurs twice in the array. Find numbers a and b.
Note: The test cases are generated such that there always exists one missing and one repeating number within the range [1,n].

Examples:
Input: arr[] = [2, 2]
Output: [2, 1]
Explanation: Repeating number is 2 and smallest positive missing number is 1.



class Solution {
  public:
    vector<int> findTwoElement(vector<int>& arr) {
        int N=arr.size();
        long long n=N;
        long long S=0,S2=0;
        long long Sn=(n*(n+1))/2;
        long long S2n=(n*(n+1)*(2*n+1))/6;
        for(int i=0;i<n;i++){
            S=S+arr[i];
            S2=S2+((long long)arr[i]*(long long)arr[i]);
        }
        long long val1=S-Sn;
        long long val2=S2-S2n;
        val2=val2/val1;
        
        long long repeating = (val1+val2)/2;
        long long missing = (val2-repeating);
        return {(int)repeating,(int)missing};
    }
};
