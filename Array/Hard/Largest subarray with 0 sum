Given an array arr containing both positive and negative integers, the task is to compute the length of the largest subarray that has a sum of 0.

Examples:
Input: arr[] = [15, -2, 2, -8, 1, 7, 10, 23]
Output: 5
Explanation: The largest subarray with a sum of 0 is [-2, 2, -8, 1, 7].


class Solution {
  public:
    int maxLen(vector<int>& arr) {
        int res = 0;
        int n=arr.size();
        unordered_map<int,int> mp;
        int pre_sum = 0;
        
        for(int i=0;i<n;i++){
                
            pre_sum += arr[i];
            if(pre_sum == 0) res = i+1;
            
            if(mp.find(pre_sum) == mp.end()){
                mp[pre_sum] = i;
            }else{
                res = max(res,i-mp[pre_sum]);
            }
        }
        return res;
    }
};
