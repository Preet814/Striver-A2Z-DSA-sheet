There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4



class Solution {
public:
    int pivot(vector<int>& arr,int s,int e,int n){
        while(s<=e){
            int mid=(s+e)/2;
            if(s==e)
                return s;
            if(mid+1<=n && arr[mid]>arr[mid+1])
                return mid;
            else if(mid-1>=0 && arr[mid-1]>arr[mid])
                return mid-1;
            else if(arr[s]>arr[mid])
                e=mid-1;
            else
                s=mid+1;
        }
        return -1;
    }
    int binarySearch(vector<int>& nums,int s,int e,int target){
        while(s<=e){
            int mid=(s+e)/2;
            if(nums[mid]==target)
                return mid;
            else if(nums[mid]<target)
                s=mid+1;
            else
                e=mid-1;
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
        int n=nums.size();
        int pivotIdx=pivot(nums,0,n-1,n-1);
        int ans=-1;
        if(target>=nums[0] && target<=nums[pivotIdx]){
            ans= binarySearch(nums,0,pivotIdx,target);
        }
        else{
            ans= binarySearch(nums,pivotIdx+1,n-1,target);
        }
        return ans;
    }
};
