Given an unsorted array arr[] of integers and an integer x, find the floor and ceiling of x in arr[].
Floor of x is the largest element which is smaller than or equal to x. Floor of x doesn’t exist if x is smaller than smallest element of arr[].
Ceil of x is the smallest element which is greater than or equal to x. Ceil of x doesn’t exist if x is greater than greatest element of arr[].
Return an array of integers denoting the [floor, ceil]. Return -1 for floor or ceiling if the floor or ceiling is not present.

Examples:
Input: x = 7 , arr[] = [5, 6, 8, 9, 6, 5, 5, 6]
Output: 6, 8
Explanation: Floor of 7 is 6 and ceil of 7 is 8.


class Solution {
    
  public:
    int solve_one(vector<int>& arr,int k,int n){
        int s=0,e=n-1;
        int ans=-1;
        while(s<=e){
            int mid=s+(e-s)/2;
            if(arr[mid]<=k){
                s=mid+1;
                ans=mid;
            }
            else{
                e=mid-1;
            }
        }
        return ans;
    }
    int solve_two(vector<int>& arr, int k,int n){
        int s=0,e=n-1;
        int ans=-1;
        while(s<=e){
            int mid=s+(e-s)/2;
            if(arr[mid]>=k){
                e=mid-1;
                ans=mid;
            }
            else{
                s=mid+1;
            }
        }
        return ans;
    }
    vector<int> getFloorAndCeil(int x, vector<int> &arr) {
        sort(arr.begin(),arr.end());
        vector<int> ans;
        int n=arr.size();
        int idx1=solve_one(arr,x,n);
        if(idx1==-1){
            ans.push_back(-1);
        }
        else{
            ans.push_back(arr[idx1]);
        }
        int idx2=solve_two(arr,x,n);
        if(idx2==-1){
            ans.push_back(-1);
        }
        else{
            ans.push_back(arr[idx2]);
        }
        
        return ans;
    }
};
