Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity. 

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]



class Solution {
public:
    int firstOcc(vector<int>& nums, int s, int e, int target){
        int ans=-1;
        while(s<=e){
            int mid=(s+e)/2;
            if(nums[mid]==target){
                ans=mid;
                e=mid-1;
            }
            else if(nums[mid]<target)
                s=mid+1;
            else
                e=mid-1;
        }
        return ans;
    }
    int lastOcc(vector<int>& nums, int s, int e, int target){
        int ans=-1;
        while(s<=e){
            int mid=(s+e)/2;
            if(nums[mid]==target){
                ans=mid;
                s=mid+1;
            }
            else if(nums[mid]<target)
                s=mid+1;
            else
                e=mid-1;
        }
        return ans;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size()-1;
        int first=firstOcc(nums,0,n,target);
        if(first==-1)
            return {-1,-1};
        return {first,lastOcc(nums,0,n,target)};
    }
};
